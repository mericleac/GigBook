// <auto-generated />
using System;
using GigBook.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GigBook.Migrations
{
    [DbContext(typeof(GigBookContext))]
    [Migration("20180920165518_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GigBook.Models.Gig", b =>
                {
                    b.Property<int>("GigId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<float>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Length");

                    b.Property<bool>("MusicianConfirm");

                    b.Property<int>("MusicianId");

                    b.Property<int>("ReviewId");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Transaction");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<bool>("UserConfirm");

                    b.Property<int>("UserId");

                    b.HasKey("GigId");

                    b.HasIndex("MusicianId");

                    b.HasIndex("UserId");

                    b.ToTable("Gigs");
                });

            modelBuilder.Entity("GigBook.Models.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Family")
                        .IsRequired();

                    b.Property<int>("MusicianId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("YearsExperience");

                    b.HasKey("InstrumentId");

                    b.HasIndex("MusicianId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("GigBook.Models.Musician", b =>
                {
                    b.Property<int>("MusicianId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Summary");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("MusicianId");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("GigBook.Models.PrivateMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("From");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("MusicianId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("MessageId");

                    b.HasIndex("MusicianId");

                    b.HasIndex("UserId");

                    b.ToTable("PMs");
                });

            modelBuilder.Entity("GigBook.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GigId");

                    b.Property<int?>("GigId1");

                    b.Property<int>("MusicianId");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("ReviewId");

                    b.HasIndex("GigId1");

                    b.HasIndex("MusicianId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GigBook.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("MusicianId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GigBook.Models.Gig", b =>
                {
                    b.HasOne("GigBook.Models.Musician", "Musician")
                        .WithMany("Gigs")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigBook.Models.User", "User")
                        .WithMany("Gigs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GigBook.Models.Instrument", b =>
                {
                    b.HasOne("GigBook.Models.Musician", "Musician")
                        .WithMany("Instruments")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GigBook.Models.PrivateMessage", b =>
                {
                    b.HasOne("GigBook.Models.Musician", "Musician")
                        .WithMany("PMs")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigBook.Models.User", "User")
                        .WithMany("PMs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GigBook.Models.Review", b =>
                {
                    b.HasOne("GigBook.Models.Gig", "Gig")
                        .WithMany()
                        .HasForeignKey("GigId1");

                    b.HasOne("GigBook.Models.Musician", "Musician")
                        .WithMany("Reviews")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GigBook.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
